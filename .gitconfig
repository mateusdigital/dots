##
## First version based upon:
##    https://raw.githubusercontent.com/mathiasbynens/dotfiles/main/.gitconfig ##
##
##
## Dependencies:
##    - peco
##

[alias]
    ## Branch
    ##--------------------------------------------------------------------------
    list-branches = branch --all
    branch-name  = rev-parse --abbrev-ref HEAD;

    ## NICE!
    change-branch = "!f() {            \
        a=$(git list-branches          \
            | sed s#remotes/origin/##g \
            | sort                     \
            | uniq                     \
            | grep -v '*'              \
            | peco                     \
        );                             \
        git checkout $a;               \
    }; f";

    ## NICE!
    merge-branch = "!f() {      \
        b=$(git branch-name);   \
                                \
        t=$(git list-branches   \
            | sort              \
            | uniq              \
            | grep -v '*'       \
            | peco              \
        );                      \
                                \
        git checkout $t;        \
        git merge --no-ff $b;   \
    }; f"

    remove-branch = "!f() {                    \
        branch_name=$1;                        \
        echo "Deleting branch: $branch_name";  \
        git branch      --delete $branch_name; \
        git push origin --delete $branch_name; \
        echo "Deleted...";                     \
    }; f"

    ## depends on: delete-branch
    delete-merged-branches = "!git branch --merged | grep -v '*' | xargs -n 1 git delete-branch";

    ##
    make-branch = "!f() {                \
        name=$(echo "$@" | tr ' ' '-');  \
        git checkout -b $name;           \
    }; f";

    bls = list-branches;
    bn  = branch-name;
    bcd = change-branch;
    bmk = new-branch;


    ## Clone
    ##--------------------------------------------------------------------------
    clone-recursive = clone --recursive;
    rclone          = clone-recursive;

    ## Commit
    ##--------------------------------------------------------------------------
    amend = commit --amend --reuse-message=HEAD

    ## Diff
    ##--------------------------------------------------------------------------
    d = diff

    ## Info
    ##--------------------------------------------------------------------------
    list-alias   = "!f() { \
        git-aliases.sh;    \
    }; f";

    whoami       = config      user.email
    contributors = shortlog  --summary --numbered
    root         = rev-parse --show-toplevel
    url          = config    --get remote.origin.url
    date-of      = log       --diff-filter=A --follow --format=%ad  --date=format:"%Y-%m-%d" --reverse --

    ## GUI
    ##--------------------------------------------------------------------------
    g = "!f() {     \
        gitui "$@"; \
    }; f";

    ## Log
    ##--------------------------------------------------------------------------
    ## Last X lines in a tree
    l    = log --pretty=oneline -n 10 --graph --abbrev-commit
    tree = log --oneline --decorate --graph --all


    ## Push / Pull
    ##--------------------------------------------------------------------------
    p        = "!git push --set-upstream origin $(git branch-name);";
    pull-all = pull --recurse-submodules

    ## MISC
    ##--------------------------------------------------------------------------
    list-tags    = tag -l
    list-remotes = remote --verbose
    list-subs    = "!(git config --file $(git root)/.gitmodules --name-only --get-regexp path)" ## @XXX: Remote the .path from the subodules...

    update-submodules = submodule update --init --recursive;

    ## Status
    ##--------------------------------------------------------------------------
    s  = status -s;
    ss = status -su;
    sss = status -su; ## @notice: Don't want do get an error cause miss key...

[apply]
    whitespace = fix

[branch]
    # Show most recently changed branches first.
    sort = -committerdate

[core]
    excludesfile = ~/.gitignore
    editor       = nvim
    autocrlf     = false

    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false
    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false
    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[color]
    ui = auto

[credential]
    helper = cache --timeout=86400

[diff]
    renames = copies

[init]
    defaultBranch = main

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]
    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[pull]
    rebase = false

[user]
    name  = mateus-earth
    email = mateus@cosmicpig.digital


##
## Colors
##

[color "branch"]
    current = yellow reverse
    local   = yellow
    remote  = green

[color "diff"]
    meta = yellow  bold
    frag = magenta bold # line info
    old  = red          # deletions
    new  = green        # additions

[color "status"]
    added     = green
    changed   = yellow
    deleted   = red
    untracked = white
